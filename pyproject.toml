[project]
name = "secretariat"
version = "0.1.0"
authors = [
    {name = "Hugo Baldwin", email = "windlab@gmail.com"},
]
description = "AI agent application built with Quart, HTMX, and Anthropic Claude"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["ai", "agent", "telegram"]
dependencies = [
    "quart",
    "python-dotenv",
    "alembic",
    "apscheduler",
    "browser-use; platform_machine != 'armv6l'",
    "pydantic-ai-slim[duckduckgo]",
    "aiosqlite",
    "httpx",
    "jinja-ui-kit @ git+https://github.com/byzantime/jinja-ui-kit.git",
    "quart-assets",
    "quart-auth",
    "quart-compress",
    "quart-flask-patch",
    "sqlalchemy[asyncio]",
    "sentry-sdk",
    "python-telegram-bot[webhooks]",
    "fastembed; platform_machine != 'armv6l'",
    "numpy",
    "qdrant-client; platform_machine != 'armv6l'",
    "vaderSentiment",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "coverage>=7.0.0",
    "aiosqlite>=0.20.0",
    "ruff>=0.12.7",
    "black>=24.0.0",
]

[tool.black]
line-length = 88
unstable = true
extend-exclude = '''
(
  ^/migrations
)
'''

[tool.ruff]
# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable pycodestyle (`E`), Pyflakes (`F`), and isort (`I`) codes by default
select = ["E", "F", "I", "C90"]
ignore = ["F402", "E501"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

[tool.ruff.lint.mccabe]
# Flag errors if max complexity exceeded
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["src"]
known-third-party = ["quart"]
force-single-line = true

[tool.pytest.ini_options]
markers = [
    "asyncio",
    "integration: marks tests as integration tests",
    "stress: marks tests as stress tests",
]
asyncio_default_fixture_loop_scope = "function"
